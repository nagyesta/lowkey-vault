plugins {
    alias(libs.plugins.versioner)
    alias(libs.plugins.index.scan)
    alias(libs.plugins.owasp.dependencycheck)
    alias(libs.plugins.nexus.publish.plugin)
    alias libs.plugins.cyclonedx.bom apply false
    alias libs.plugins.licensee.plugin apply false
}

group = 'com.github.nagyesta.lowkey-vault'

apply from: "config/ossindex/ossIndexAudit.gradle"

project.ext {
    gitToken = project.hasProperty('githubToken') ? (project.property('githubToken') as String) : ''
    gitUser = project.hasProperty('githubUser') ? (project.property('githubUser') as String) : ''
    ossrhUser = project.hasProperty('ossrhUsername') ? (project.property('ossrhUsername') as String) : ''
    ossrhPass = project.hasProperty('ossrhPassword') ? (project.property('ossrhPassword') as String) : ''
    ossIndexUser = project.hasProperty('ossIndexUsername') ? (project.property('ossIndexUsername') as String) : ''
    ossIndexPass = project.hasProperty('ossIndexPassword') ? (project.property('ossIndexPassword') as String) : ''
    keyToolDir = project.hasProperty('keyToolDir') ? (project.property('keyToolDir') as String) : ''
    dockerAbortGroups = project.hasProperty('dockerSuppressGroups') ? 'all' : ''
    dockerSuppressGroups = project.hasProperty('dockerSuppressGroups') ? (project.property('dockerSuppressGroups') as String) : ''
    repoUrl = 'https://github.com/nagyesta/lowkey-vault'
    licenseName = 'MIT License'
    licenseUrl = 'https://raw.githubusercontent.com/nagyesta/lowkey-vault/main/LICENSE'
    maintainerId = 'nagyesta'
    maintainerName = 'Istvan Zoltan Nagy'
    maintainerUrl = 'https://github.com/nagyesta/'
    scmConnection = 'scm:git:https://github.com/nagyesta/lowkey-vault.git'
    scmProjectUrl = 'https://github.com/nagyesta/lowkey-vault/'
}

versioner {
    startFrom {
        major = 0
        minor = 0
        patch = 1
    }
    match {
        major = '{major}'
        minor = '{minor}'
        patch = '{patch}'
    }
    pattern {
        pattern = "%M.%m.%p"
    }
    git {
        authentication {
            https {
                token = project.ext.gitToken
            }
        }
    }
    tag {
        prefix = 'v'
        useCommitMessage = true
    }
}

configure(subprojects.findAll({
    !'lowkey-vault-docker'.equalsIgnoreCase(it.name)
})) {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'org.sonatype.gradle.plugins.scan'
    apply plugin: 'org.owasp.dependencycheck'
    apply plugin: 'org.cyclonedx.bom'
    apply plugin: 'app.cash.licensee'

    versioner.apply()

    version = rootProject.version
    //noinspection GroovyUnusedAssignment
    repositories {
        mavenCentral()
    }

    javadoc.options.addStringOption('Xdoclint:none', '-quiet')

    jacocoTestReport {
        reports {
            xml.required.set(true)
            xml.outputLocation.set(layout.buildDirectory.file("reports/jacoco/report.xml").get().getAsFile())
            csv.required.set(false)
            html.required.set(true)
            html.outputLocation.set(layout.buildDirectory.dir("reports/jacoco/html").get().getAsFile())
        }
    }

    test.finalizedBy jacocoTestReport
    jacocoTestReport.finalizedBy jacocoTestCoverageVerification

    jacoco {
        toolVersion = libs.versions.jacoco.get()
    }

    jacocoTestCoverageVerification {
        inputs.file(layout.buildDirectory.file("reports/jacoco/report.xml").get().getAsFile())
        outputs.file(layout.buildDirectory.file("reports/jacoco/jacocoTestCoverageVerification").get().getAsFile())

        violationRules {
            rule {
                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.8
                }
                limit {
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                    minimum = 0.8
                }
                excludes = []
            }
            rule {
                element = 'CLASS'
                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.5
                }
                limit {
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                    minimum = 0.5
                }
                excludes = [
                        'com.github.nagyesta.lowkeyvault.LowkeyVaultApp',
                        'com.github.nagyesta.lowkeyvault.AppConfiguration',
                        'com.github.nagyesta.lowkeyvault.service.exception.AlreadyExistsException',
                        'com.github.nagyesta.lowkeyvault.service.exception.NotFoundException',
                        'com.github.nagyesta.lowkeyvault.service.exception.CryptoException',
                        'com.github.nagyesta.lowkeyvault.exception.VaultNotFoundException'
                ]
            }
        }
        doLast {
            layout.buildDirectory.file("reports/jacoco/jacocoTestCoverageVerification").get().getAsFile().write("Passed")
        }
    }
    jar.dependsOn check

    tasks.withType(Checkstyle).configureEach {
        configProperties = [base_dir: rootDir.toString(), cache_file: layout.buildDirectory.file("checkstyle/cacheFile").get().getAsFile()]
        reports {
            xml.required.set(false)
            html.required.set(true)
            html.stylesheet resources.text
                    .fromFile(rootProject.file('config/checkstyle/checkstyle-stylesheet.xsl') as String)
        }
    }
    checkstyle.toolVersion = libs.versions.checkstyle.get()


    cyclonedxBom {
        includeConfigs = ["runtimeClasspath"]
        skipConfigs = ["compileClasspath", "testCompileClasspath"]
        skipProjects = []
        projectType = project.name.endsWith("app") ? "application" : "library"
        schemaVersion = "1.5"
        destination = file("build/reports")
        outputName = "bom"
        outputFormat = "json"
        //noinspection UnnecessaryQualifiedReference
        final def attachmentText = new org.cyclonedx.model.AttachmentText()
        attachmentText.setText(file("${project.rootProject.projectDir}/LICENSE").readBytes().encodeBase64().toString())
        attachmentText.setEncoding("base64")
        attachmentText.setContentType("text/plain")
        //noinspection UnnecessaryQualifiedReference
        final def license = new org.cyclonedx.model.License()
        license.setName(project.rootProject.ext.licenseName)
        license.setLicenseText(attachmentText)
        license.setUrl(project.rootProject.ext.licenseUrl)
        setLicenseChoice {
            it.addLicense(license)
        }
    }

    licensee {
        allow("Apache-2.0")
        allow("MIT")
        allow("MIT-0")
        allow("EPL-1.0")
        allow("EPL-2.0")
        allow("BSD-2-Clause")
        allowUrl("https://www.bouncycastle.org/licence.html")
        allowUrl("https://github.com/openjdk/nashorn/blob/main/LICENSE")
        allowUrl("https://github.com/swagger-api/swagger-ui")
        allowUrl("http://www.eclipse.org/legal/epl-2.0")
        allowUrl("http://www.eclipse.org/org/documents/edl-v10.php")
        allowUrl("https://asm.ow2.io/license.html")
        ignoreDependencies("org.apache.tomcat", "tomcat-servlet-api")
        unusedAction("IGNORE")
    }

    tasks.register('copyLegalDocs', Copy.class) {
        from file("${project.rootProject.projectDir}/LICENSE")
        from layout.buildDirectory.file("reports/licensee/artifacts.json").get().asFile
        from layout.buildDirectory.file("reports/bom.json").get().asFile
        into layout.buildDirectory.dir("resources/main/META-INF").get().asFile
        rename('artifacts.json', 'dependency-licenses.json')
        rename('bom.json', 'SBOM.json')
    }
    //noinspection ConfigurationAvoidance
    tasks.copyLegalDocs.dependsOn(tasks.licensee)
    tasks.copyLegalDocs.dependsOn(tasks.cyclonedxBom)
    tasks.javadoc.dependsOn(tasks.copyLegalDocs)
    tasks.compileTestJava.dependsOn(tasks.copyLegalDocs)
    tasks.checkstyleMain.dependsOn(tasks.copyLegalDocs)
    tasks.processResources.finalizedBy(tasks.copyLegalDocs)

    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/nagyesta/lowkey-vault")
                credentials {
                    username = rootProject.ext.gitUser
                    password = rootProject.ext.gitToken
                }
            }
        }
    }

    //Disable metadata publishing and rely on Maven only
    tasks.withType(GenerateModuleMetadata).configureEach {
        enabled = false
    }

    ossIndexAudit {
        username = rootProject.ext.ossIndexUser
        password = rootProject.ext.ossIndexPass
        printBanner = false
        colorEnabled = true
        showAll = false
        outputFormat = 'DEPENDENCY_GRAPH'
        excludeVulnerabilityIds = rootProject.ext.ossIndexExclusions
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = project.ext.ossrhUser
            password = project.ext.ossrhPass
        }
    }
}

ossIndexAudit {
    username = rootProject.ext.ossIndexUser
    password = rootProject.ext.ossIndexPass
    printBanner = false
    colorEnabled = true
    showAll = false
    outputFormat = 'DEPENDENCY_GRAPH'
    excludeVulnerabilityIds = rootProject.ext.ossIndexExclusions
}

repositories {
    mavenCentral()
}

