plugins {
    id 'org.springframework.boot' version '2.5.5'
    id 'java'
    //noinspection SpellCheckingInspection
    id "io.freefair.lombok" version '6.2.0'
    id 'com.github.nagyesta.abort-mission-gradle-plugin' version '2.1.0'
}

group = "${rootProject.group}"

project.ext {
    artifactDisplayName = "Lowkey Vault - App"
    artifactDescription = "Assembled application of Lowkey Vault."
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter:${rootProject.ext.springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-json:${rootProject.ext.springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-web:${rootProject.ext.springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-tomcat:${rootProject.ext.springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-validation:${rootProject.ext.springBootVersion}"
    implementation "ch.qos.logback:logback-classic:${rootProject.ext.logbackVersion}"
    implementation "ch.qos.logback:logback-core:${rootProject.ext.logbackVersion}"
    implementation "org.bouncycastle:bcpkix-jdk15on:${rootProject.ext.bouncyCastleVersion}"
    implementation "org.hibernate:hibernate-validator:${rootProject.ext.hibernateVersion}"
    implementation "com.google.code.findbugs:jsr305:${rootProject.ext.findBugsVersion}"
    annotationProcessor "org.projectlombok:lombok:${rootProject.ext.lombokVersion}"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${rootProject.ext.springBootVersion}"
    testImplementation "org.springframework.boot:spring-boot-starter-test:${rootProject.ext.springBootVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter:${rootProject.ext.jupiterVersion}"
    testImplementation "com.github.nagyesta.abort-mission.boosters:abort.booster-junit-jupiter:${rootProject.ext.abortMissionVersion}"
}

test {
    outputs.file(file("$buildDir/reports/abort-mission/abort-mission-report.json"))
    useJUnitPlatform()
    systemProperty("junit.jupiter.extensions.autodetection.enabled", true)
    systemProperty("junit.jupiter.execution.parallel.enabled", true)
    systemProperty("junit.jupiter.execution.parallel.mode.default", "concurrent")
    systemProperty("junit.jupiter.execution.parallel.mode.classes.default", "concurrent")
}
abortMission {
    toolVersion rootProject.ext.abortMissionVersion
}

jar {
    enabled = false
}

task regenerateCertJks(type: Exec) {
    outputs.file("${project.projectDir}/src/main/resources/cert/keystore.jks")
    workingDir file("${project.projectDir}/src/main/resources/cert")
    outputs.upToDateWhen { false }

    //generate key in JKS with JDK15+ keytool to allow wildcard SAN
    commandLine "${project.property('keyToolDir') ?: ''}/keytool",
            '-genkeypair',
            '-alias', 'lowkey-vault.local',
            '-keyalg', 'RSA',
            '-keysize', '4096',
            '-validity', '3650',
            '-dname', 'CN=lowkey-vault.local',
            '-keypass', 'changeit',
            '-keystore', 'keystore.jks',
            '-storeType', 'JKS',
            '-storepass', 'changeit',
            '-ext', 'SAN=dns:lowkey-vault.local,dns:lowkey-vault,dns:*.localhost,dns:*.lowkey-vault,dns:localhost,ip:127.0.0.1'

    doFirst {
        file("${project.projectDir}/src/main/resources/cert/keystore.jks").delete()
    }

    logging.captureStandardOutput LogLevel.INFO
    logging.captureStandardError LogLevel.ERROR
}
task regenerateCert(type: Exec) {
    outputs.file("${project.projectDir}/src/main/resources/cert/keystore.p12")
    outputs.file("${project.projectDir}/src/main/resources/cert/keystore.jks")
    inputs.file("${project.projectDir}/src/main/resources/cert/keystore.jks")
    workingDir file("${project.projectDir}/src/main/resources/cert")
    outputs.upToDateWhen { false }
    dependsOn tasks.regenerateCertJks
    //convert to P12 using the old keytool to fix algorithm issues when used with old JDK (and still use P12)
    commandLine 'keytool',
            '-importkeystore',
            '-srckeystore', 'keystore.jks',
            '-srcstorepass', 'changeit',
            '-srcstoretype', 'JKS',
            '-destkeystore', 'keystore.p12',
            '-deststorepass', 'changeit',
            '-deststoretype', 'pkcs12'

    doFirst {
        file("${project.projectDir}/src/main/resources/cert/keystore.p12").delete()
    }
    doLast {
        file("${project.projectDir}/src/main/resources/cert/keystore.jks").delete()
    }

    logging.captureStandardOutput LogLevel.INFO
    logging.captureStandardError LogLevel.ERROR
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact bootJar
            artifactId = "${project.name}"
            pom {
                name = "${project.artifactDisplayName}"
                description = "${project.artifactDescription}"
                url = rootProject.ext.repoUrl
                packaging = "jar"
                licenses {
                    license {
                        name = rootProject.ext.licenseName
                        url = rootProject.ext.licenseUrl
                    }
                }
                developers {
                    developer {
                        id = rootProject.ext.maintainerId
                        name = rootProject.ext.maintainerName
                        url = rootProject.ext.maintainerUrl
                    }
                }
                scm {
                    connection = rootProject.ext.scmConnection
                    developerConnection = rootProject.ext.scmConnection
                    url = rootProject.ext.scmProjectUrl
                }
                withXml {
                    asNode().dependencies.findAll() {
                        def parent = it.parent()
                        parent.remove(it)
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
