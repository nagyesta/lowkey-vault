plugins {
    id 'java'
    alias(libs.plugins.abort.mission)
    alias(libs.plugins.docker)
    alias(libs.plugins.docker.run)
}

version = rootProject.version
//noinspection GroovyUnusedAssignment
sourceCompatibility = '11'
repositories {
    mavenCentral()
}

java {
    withJavadocJar()
    withSourcesJar()
}

group = "${rootProject.group}"

dependencies {
    testImplementation project(":lowkey-vault-client")
    testImplementation libs.bouncycastle.bcpkix
    testImplementation libs.httpclient
    testImplementation libs.commons.codec
    testImplementation libs.azure.security.keyvault.keys
    testImplementation libs.azure.security.keyvault.secrets
    testImplementation libs.spring.boot.starter.test
    testImplementation libs.bundles.cucumber
    testImplementation libs.abort.mission.cucumber
    testImplementation libs.findbugs.jsr305
}

task copyAppJar(type: Copy) {
    inputs.file(rootProject.project(":lowkey-vault-app").tasks.getByPath("bootJar").outputs.files.singleFile)
    outputs.file("${buildDir}/app/lowkey-vault.jar")
    from rootProject.project(":lowkey-vault-app").tasks.getByPath("bootJar").outputs.files.singleFile
    into file("${buildDir}/app/")
    rename {
        'lowkey-vault.jar'
    }
    dependsOn(":lowkey-vault-app:bootJar")
}

docker {
    name "lowkey-vault:${rootProject.version}"
    tag 'dockerNagyesta', "nagyesta/lowkey-vault:${rootProject.version}"
    dockerfile file('src/docker/Dockerfile')
    files file("${buildDir}/app/lowkey-vault.jar")
    pull true
    noCache true
}
tasks.dockerPrepare.inputs.file("${buildDir}/app/lowkey-vault.jar")
tasks.dockerPrepare.dependsOn copyAppJar
clean.mustRunAfter dockerClean

dockerRun {
    name "lowkey-vault"
    image "lowkey-vault:${rootProject.version}"
    ports "8444:8443"
    daemonize true
    arguments '--rm'
    env 'LOWKEY_ARGS': '--LOWKEY_DEBUG_REQUEST_LOG=false --LOWKEY_VAULT_NAMES=keys-generic,keys-delete,' +
            'keys-list-rsa-1,keys-list-rsa-2,keys-list-rsa-3,keys-list-rsa-5,keys-list-rsa-25,keys-list-rsa-42,' +
            'keys-list-oct-1,keys-list-oct-2,keys-list-oct-3,keys-list-oct-5,keys-list-oct-25,keys-list-oct-42,' +
            'keys-list-ec-1,keys-list-ec-2,keys-list-ec-3,keys-list-ec-5,keys-list-ec-25,keys-list-ec-42,' +
            'keys-del-rsa-1,keys-del-rsa-2,keys-del-rsa-3,keys-del-rsa-5,keys-del-rsa-25,keys-del-rsa-42,' +
            'keys-del-oct-1,keys-del-oct-2,keys-del-oct-3,keys-del-oct-5,keys-del-oct-25,keys-del-oct-42,' +
            'keys-del-ec-1,keys-del-ec-2,keys-del-ec-3,keys-del-ec-5,keys-del-ec-25,keys-del-ec-42,' +
            'secrets-generic,secrets-delete,' +
            'secrets-list-1,secrets-list-2,secrets-list-3,secrets-list-5,secrets-list-25,secrets-list-42,' +
            'secrets-del-1,secrets-del-2,secrets-del-3,secrets-del-5,secrets-del-25,secrets-del-42'
}
tasks.dockerRun.dependsOn tasks.docker

test {
    outputs.file(file("$buildDir/reports/abort-mission/abort-mission-report.json"))
    outputs.dir(file("$buildDir/reports/cucumber"))
    systemProperty("cucumber.execution.parallel.enabled", System.getProperty("test.parallel"))
    systemProperty("cucumber.filter.tags", "not @ignore")
    useTestNG {
        systemProperty("abort-mission.report.directory", file("${buildDir}/reports/abort-mission/"))
    }
}
test.outputs.upToDateWhen { false }
test.dependsOn tasks.dockerRun
test.finalizedBy tasks.dockerStop

abortMission {
    toolVersion libs.versions.abortMission.get()
}

task publish {
    dependsOn(build)
    dependsOn("dockerPushDockerNagyesta")
}
