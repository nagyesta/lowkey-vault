plugins {
    id 'java'
    alias(libs.plugins.abort.mission)
    alias(libs.plugins.docker)
    alias(libs.plugins.docker.run)
}

version = rootProject.version
//noinspection GroovyUnusedAssignment
repositories {
    mavenCentral()
}

group = "${rootProject.group}"

dependencies {
    testImplementation project(":lowkey-vault-client")
    testImplementation libs.bouncycastle.bcpkix
    testImplementation libs.httpclient
    testImplementation libs.commons.codec
    testImplementation(libs.azure.security.keyvault.keys) {
        exclude(group: "io.netty")
    }
    testImplementation(libs.azure.security.keyvault.secrets) {
        exclude(group: "io.netty")
    }
    testImplementation(libs.azure.security.keyvault.certificates) {
        exclude(group: "io.netty")
    }
    testImplementation libs.bundles.cucumber
    testImplementation libs.abort.mission.cucumber
    testImplementation libs.findbugs.jsr305
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withJavadocJar()
    withSourcesJar()
}

tasks.register('copyAppJar', Copy.class) {
    inputs.file(rootProject.project(":lowkey-vault-app").tasks.named("bootJar").get().outputs.files.singleFile)
    outputs.file(layout.buildDirectory.file("app/lowkey-vault.jar").get().getAsFile())
    from rootProject.project(":lowkey-vault-app").tasks.named("bootJar").get().outputs.files.singleFile
    into layout.buildDirectory.dir("app/").get().getAsFile()
    rename {
        'lowkey-vault.jar'
    }
    dependsOn(":lowkey-vault-app:bootJar")
    dependsOn(":lowkey-vault-app:test")
}

docker {
    name "lowkey-vault:${rootProject.version}"
    tag 'dockerNagyesta', "nagyesta/lowkey-vault:${rootProject.version}"
    dockerfile file('src/docker/Dockerfile')
    files layout.buildDirectory.file("app/lowkey-vault.jar").get().getAsFile()
    pull true
    noCache true
}
tasks.dockerPrepare.inputs.file(layout.buildDirectory.file("app/lowkey-vault.jar").get().getAsFile())
tasks.dockerPrepare.dependsOn copyAppJar
clean.mustRunAfter dockerClean

dockerRun {
    name "lowkey-vault"
    image "lowkey-vault:${rootProject.version}"
    ports "8444:8443"
    daemonize true
    arguments '--rm'
    env 'LOWKEY_ARGS': '--LOWKEY_DEBUG_REQUEST_LOG=false ' +
            '--LOWKEY_VAULT_NAMES=certs-generic,keys-generic,keys-delete,secrets-generic,secrets-delete ' +
            '--LOWKEY_VAULT_ALIASES=keys-delete.localhost=keys-alias-delete.localhost:<port>,' +
            'secrets-delete.localhost=secrets-alias-delete.localhost:<port>'
}
tasks.dockerRun.dependsOn tasks.docker

test {
    inputs.file(rootProject.project(":lowkey-vault-app").tasks.named("bootJar").get().outputs.files.singleFile)
    outputs.file(layout.buildDirectory.file("reports/abort-mission/abort-mission-report.json").get().getAsFile())
    outputs.dir(layout.buildDirectory.dir("reports/cucumber").get().getAsFile())
    systemProperty("cucumber.execution.parallel.enabled", System.getProperty("test.parallel"))
    systemProperty("cucumber.filter.tags", "not @ignore")
    useTestNG {
        systemProperty("abort-mission.report.directory", layout.buildDirectory.dir("reports/abort-mission/").get().getAsFile())
        systemProperty("abort-mission.force.abort.evaluators", rootProject.ext.dockerAbortGroups)
        systemProperty("abort-mission.suppress.abort.evaluators", rootProject.ext.dockerSuppressGroups)
    }
}
test.dependsOn tasks.cleanTest
test.dependsOn tasks.dockerRun
test.finalizedBy tasks.dockerStop

abortMission {
    toolVersion libs.versions.abortMission.get()
}

tasks.register('publish') {
    dependsOn(build)
    dependsOn("dockerPushDockerNagyesta")
}
