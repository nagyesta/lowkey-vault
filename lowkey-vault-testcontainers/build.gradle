plugins {
    id 'java'
}

group = "${rootProject.group}"

project.ext {
    artifactDisplayName = "Lowkey Vault - Testcontainers"
    artifactDescription = "Support for using Lowkey Vault with Testcontainers."
}

dependencies {
    implementation platform("org.testcontainers:testcontainers-bom:${libs.versions.testcontainers.get()}") //import bom
    implementation libs.testcontainers
    testImplementation libs.testcontainers.jupiter
    testImplementation project(":lowkey-vault-client")
    testImplementation libs.bundles.jackson
    testImplementation libs.httpclient
    testImplementation libs.commons.codec
    testImplementation(libs.azure.security.keyvault.keys) {
        exclude(group: "io.netty")
    }
    testImplementation(libs.azure.security.keyvault.secrets) {
        exclude(group: "io.netty")
    }
    testImplementation libs.mockito.core
    testImplementation libs.jupiter
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    testImplementation libs.logback.classic
}

test {
    useJUnitPlatform()
    systemProperty("imageVersion", project.version)
    mustRunAfter(":lowkey-vault-docker:build")
    mustRunAfter(":lowkey-vault-docker:test")
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = "${project.name}"
            pom {
                name = "${project.artifactDisplayName}"
                description = "${project.artifactDescription}"
                url = rootProject.ext.repoUrl
                packaging = "jar"
                licenses {
                    license {
                        name = rootProject.ext.licenseName
                        url = rootProject.ext.licenseUrl
                    }
                }
                developers {
                    developer {
                        id = rootProject.ext.maintainerId
                        name = rootProject.ext.maintainerName
                        url = rootProject.ext.maintainerUrl
                    }
                }
                scm {
                    connection = rootProject.ext.scmConnection
                    developerConnection = rootProject.ext.scmConnection
                    url = rootProject.ext.scmProjectUrl
                }
                withXml {
                    asNode().dependencies.'*'.findAll() {
                        it.scope.text() == 'runtime'
                    }.each { it.scope*.value = 'compile' }
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
